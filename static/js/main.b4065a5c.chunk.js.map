{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","height","progressWrapper","margin","borderRadius","boxShadow","padding","App","classes","React","useState","progress","setProgress","total","isPlaying","setIsPlaying","useEffect","console","log","interval","setInterval","clearInterval","className","CircularProgress","size","thickness","value","variant","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uQAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,OACPC,OAAQ,QAEVC,gBAAiB,CACfC,OAAQ,SACRH,MATc,IAUdC,OAVc,IAWdG,aAXc,IAYdC,UAAW,mDACXC,QAAS,QAoDEC,MAhDf,WACE,IAAMC,EAAUZ,IADH,EAEmBa,IAAMC,SAAS,GAFlC,mBAENC,EAFM,KAEIC,EAFJ,OAGaH,IAAMC,SAAS,IAH5B,mBAGNG,EAHM,aAIqBJ,IAAMC,UAAS,IAJpC,mBAINI,EAJM,KAIKC,EAJL,KAgCb,OAZAN,IAAMO,WAAU,WACdC,QAAQC,IAAI,aACZ,IAAMC,EAAWC,aAAY,WACvBN,EAZFH,GAAoB,GAARE,IAChBD,EAAYD,EAAW,GACvBM,QAAQC,IAAI,aAAeP,IAavBU,cAAcF,KAEf,KACH,OAAO,kBAAME,cAAcF,OAI3B,yBAAKG,UAAWd,EAAQT,MACtB,yBAAKuB,UAAWd,EAAQN,iBACtB,kBAACqB,EAAA,EAAD,CACEC,KArDQ,IAsDRC,UAAW,GACXC,MAAO,KAAO,EAAIf,GAAU,GAAKE,IACjCc,QAAQ,YAGZ,kBAACC,EAAA,EAAD,CAAQC,QA1BgB,WAC1Bd,GAAcD,KAyBZ,QACA,6BAAMH,KCpDQmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.b4065a5c.chunk.js","sourcesContent":["import React from \"react\";\nimport { CircularProgress, Button } from \"@material-ui/core\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\n\nconst timerSize = 500;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  progressWrapper: {\n    margin: \"0 auto\",\n    width: timerSize,\n    height: timerSize,\n    borderRadius: timerSize,\n    boxShadow: \"20px 20px 60px #c4c4c4, -20px -20px 60px #ffffff\",\n    padding: 10,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [progress, setProgress] = React.useState(0);\n  const [total, setTotal] = React.useState(60);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n\n  const handleProgress = (progress) => {\n    setProgress(progress);\n  };\n\n  const tick = () => {\n    if (progress >= total * 60) return;\n    setProgress(progress + 1);\n    console.log(\"progress: \" + progress);\n  };\n\n  const handleTogglePlaying = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  React.useEffect(() => {\n    console.log(\"useEffect\");\n    const interval = setInterval(() => {\n      if (isPlaying) {\n        tick();\n      } else {\n        clearInterval(interval);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.progressWrapper}>\n        <CircularProgress\n          size={timerSize}\n          thickness={22}\n          value={100 * (1 - progress/(60 * total))}\n          variant=\"static\"\n        />\n      </div>\n      <Button onClick={handleTogglePlaying}>Tick</Button>\n      <div>{progress}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}